#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('connect4:server');
var http = require('http');
import axios from 'axios';

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io parts
 */
var io = require('socket.io').listen(server);
var players = [];
var games = [];
var connections = [];

// Code to create and initialize a game
function createGame() {

  const gameUri = "http://192.168.1.244:3000/games/create/" + players[0]._id + "." + players[1]._id;

  axios.get(gameUri)
    .then(function (res) {
      let gameData = res.data;
      gameData["gameId"] = gameData._id;

      gameData["status"] = "player1";
      gameData["opponent"] = players[1].username;

      io.to(gameData.player1.socketId).emit("route", "game");
      io.to(gameData.player1.socketId).emit("init game", gameData);
      io.to(gameData.player1.socketId).emit("init chat", {
        user: players[0].username,
        status: "player1",
        gameId: gameData.gameId
      });

      gameData["status"] = "player2";
      gameData["opponent"] = players[0].username;

      io.to(gameData.player2.socketId).emit("route", "game");
      io.to(gameData.player2.socketId).emit("init game", gameData);
      io.to(gameData.player2.socketId).emit("init chat", {
        user: players[1].username,
        status: "player2",
        gameId: gameData.gameId
      });

      players.length = 0;
    })
    .catch(function (err) {
      console.log("didn't work brah\n\n" + err);
    });
}

io.sockets.on('connection', function(socket) {

  connections.push(socket);
  console.log('New Connection: %s sockets connected', connections.length);

  socket.on('disconnect', function(data) {
    connections.splice(connections.indexOf(socket), 1);
    console.log('Disconnected: %s sockets connected', connections.length);
  });

  socket.on('submit user', function(data){
    console.log('New User: ' + data);

    const createPlayerUri = "http://192.168.1.244:3000/players/create/" + data + "." + socket.id;

    axios.get(createPlayerUri)
      .then(function (res) {
        socket.username = data;
        players.push(res.data);

        if (players.length <= 1) { io.to(socket.id).emit("route", "queuing") }

        else createGame();
      })
      .catch(function (err) {
        console.log("Player Not Created");
      });

    if (players.length <= 1) { io.to(socket.id).emit("route", "queuing") }

    else {


    }
  });

  socket.on("new message", function(data) {

    for ( let i = 0; i < games.length; i++ ) {
      if (games[i].id == data.gameId) {

        io.to(games[i].player1).emit("update chat", {
          user: data.user,
          text: data.text,
          status: data.status
        });

        io.to(games[i].player2).emit("update chat", {
          user: data.user,
          text: data.text,
          status: data.status
        });
      }
    }
  });

  socket.on("make move", function(data) {

    const gameUri = "http://192.168.1.244:3000/games/update/" + data.gameId + "." + data.column;

    axios.get(gameUri)
      .then(function (res) {
        let gameData = res.data;

        if (gameData.victory != "N/A") {
          io.to(gameData.player1.socketId).emit("victory", gameData.board);
          io.to(gameData.player2.socketId).emit("victory", gameData.board);
        } else {
          io.to(gameData.player1.socketId).emit("update game", gameData.board);
          io.to(gameData.player2.socketId).emit("update game", gameData.board);
        }
      })
      .catch(function (err) {
        console.log("didn't work brah\n\n" + err);
      });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
